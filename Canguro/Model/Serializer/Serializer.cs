using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using Canguro.Model.Load;
using Canguro.Model.Material;
using Canguro.Model.Section;
using Canguro.Model.Design;
using Canguro.Model;
using Canguro;
using ICSharpCode.SharpZipLib.Core;
using ICSharpCode.SharpZipLib.Zip;
using System.Runtime.Serialization.Formatters.Binary;

namespace Canguro.Model.Serializer
{
    internal class Serializer
    {
        protected Model model;

        XmlWriter tmpxml;
        private static String steelCode = "";
        private static String concreteCode = "";

        public Serializer(Model model)
        {
            this.model = model;
        }

        internal void Serialize(string filePath)
        {
            Stream stream = new MemoryStream();
            System.Windows.Forms.Cursor cursor = System.Windows.Forms.Cursor.Current;
            try
            {
                Serialize(stream, true);
                stream.Position = 0;

                byte[] buffer = new byte[8192];
                if (".xml".Equals(Path.GetExtension(filePath).ToLower()))
                {
#if DEBUG
                    FileStream fWritter = File.Create(filePath);
                    StreamUtils.Copy(stream, fWritter, buffer);
                    fWritter.Close();
#else
                    throw new Exception("XML format not supported by current version");
#endif
                }
                else
                {
                    FileStream fs = File.Create(filePath);
                    BinaryFormatter bformatter = new BinaryFormatter();
                    bformatter.Serialize(fs, "version=7.14");
                    using (ZipOutputStream s = new ZipOutputStream(fs))
                    {
                        try
                        {
                            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;
                            s.Password = "mnloaw7ur4hlu.awdebnc7loy2hq3we89";
                            if (model.HasResults)
                                s.SetLevel(5); // 0 (store only) to 9 (best compression)
                            else
                                s.SetLevel(9); // 0 (store only) to 9 (best compression)
                            ZipEntry entry = new ZipEntry(Path.GetFileName("[Empty]"));
                            s.PutNextEntry(entry);
                            StreamUtils.Copy(stream, s, buffer);
                        }
                        finally
                        {
                            s.Flush();
                            s.Finish();
                            s.Close();
                            s.Dispose();
                        }
                    }
                }
            }
            finally
            {
                stream.Close();
                System.Windows.Forms.Cursor.Current = cursor;
            }
        }

        /// <summary>
        /// Create a temporary XML file that will be send to SAP application
        /// </summary>
        /// <param name="m"></param>
        /// <param name="filePath"></param>
        internal void Serialize(Stream stream, bool serializaResults)
        {
            //String xmlfile = filePath.Substring(0, filePath.Length - 3) + "tmp";
            //tmpxml = new XmlTextWriter(stream, null);
            tmpxml = new XmlStreamWriter(stream);

            Canguro.Model.UnitSystem.UnitSystem uSystem = model.UnitSystem;
            model.UnitSystem = Canguro.Model.UnitSystem.InternationalSystem.Instance;
            LoadCase loadCase = model.ActiveLoadCase;

            try
            {
                //tmpxml.Formatting = Formatting.Indented;
                //tmpxml.Indentation = 4;
                //tmpxml.Namespaces = false;
                tmpxml.WriteStartDocument();
                tmpxml.WriteComment("XML file generated by CanguroTeam");
                tmpxml.WriteComment(DateTime.Now.ToString());
                // node added for validation
                tmpxml.WriteStartElement("XmlExportedFile");
                // writing fix values for nodes
                writeFixedNode(tmpxml);
                //writing nodes for Joints
                writeNode(tmpxml, model.JointList);
                //writing xml nodes for Materials
                writeNode(tmpxml);
                //writing nodes for Lines
                writeNode(tmpxml, model.LineList);
                //writing xml nodes for Abstract cases
                writeNode(tmpxml, model);
                //writing xml nodes for Load cases
                writeNode(tmpxml, model.LoadCases);
                //writing xml nodes for concrete material
                writeConcreteNode(tmpxml, model.ConcreteDesignOptions);
                //writing xml nodes for steel material
                writeSteelNode(tmpxml, model.SteelDesignOptions);
                //writing xml nodes for frame design 
                writeFrameDesignNode(tmpxml, model);
                //writing nodes for spectrum analysis
                writeNode(tmpxml, model.ResponseSpectra, model.AbstractCases);
                //writing nodes for constraints
                writeConstraints(tmpxml, model);

                if (model.HasResults && serializaResults)
                    new ResultsSerializer(model).Serialize(tmpxml);
                /******************* Treu Structure specific ***********************/
                writeLayers(tmpxml, model.Layers);
                writeLayerAssignments(tmpxml, model);

                model.UnitSystem = uSystem;
                writeCanguroVariables(tmpxml);

                tmpxml.WriteEndElement();
                tmpxml.Flush();
            }
            catch (Exception e)
            {
                string message = Culture.Get("XmlError");
#if DEBUG
                message += "## " + e.Message + " ##";
#endif
                System.Windows.Forms.MessageBox.Show(message, Culture.Get("error"),
                    System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
                throw e;
            }
            finally
            {
                //tmpxml.Close();
                model.UnitSystem = uSystem;
                model.ActiveLoadCase = loadCase;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        private void writeFixedNode(XmlWriter xml)
        {
            //xml.WriteStartElement("Project_Information");
            //writeProjectInf(tmpxml);
            //xml.WriteEndElement();

            xml.WriteStartElement("Active_Degrees_of_Freedom");
            writeDegreesofFreedom(tmpxml);
            xml.WriteEndElement();

            xml.WriteStartElement("Database_Format_Types");
            writeDatabaseFormat(tmpxml);
            xml.WriteEndElement();

            xml.WriteStartElement("Tables_Automatically_Saved_After_Analysis");
            writeSavedTable(tmpxml);
            xml.WriteEndElement();

            xml.WriteStartElement("Masses_1_-_Mass_Source");
            writeMassSource(tmpxml);
            xml.WriteEndElement();

            //xml.WriteStartElement("Cable_Section_Definitions");
            //writeCableSecDefinitions(tmpxml);
            //xml.WriteEndElement();

            xml.WriteStartElement("Named_Sets_-_Database_Tables_1_-_General");
            writeNamedSets1(tmpxml);
            xml.WriteEndElement();

            //xml.WriteStartElement("Frame_Auto_Mesh_Assignments");
            //writeAutoMesh(tmpxml);
            //xml.WriteEndElement();

            xml.WriteStartElement("Rebar_Sizes");
            writeRebarSizes(tmpxml);
            xml.WriteEndElement();
        }

        //private void writeProjectInf(XmlWriter xml){
        //    xml.WriteAttributeString("CompanyName", " ");
        //    xml.WriteAttributeString("ClientName", " ");
        //    xml.WriteAttributeString("ProjectName", " ");
        //    xml.WriteAttributeString("ProjectNumber", " ");
        //    xml.WriteAttributeString("ModelName", " ");
        //    xml.WriteAttributeString("ModelDescription", " ");
        //    xml.WriteAttributeString("RevisionNumber", " ");
        //    xml.WriteAttributeString("FrameType", " ");
        //    xml.WriteAttributeString("Engineer", " ");
        //    xml.WriteAttributeString("Checker", " ");
        //    xml.WriteAttributeString("IssueCode", " ");
        //    xml.WriteAttributeString("DesignCode", " ");
        //}

        private void writeDegreesofFreedom(XmlWriter xml)
        {
            xml.WriteAttributeString("UX", "Yes");
            xml.WriteAttributeString("UY", "Yes");
            xml.WriteAttributeString("UZ", "Yes");
            xml.WriteAttributeString("RX", "Yes");
            xml.WriteAttributeString("RY", "Yes");
            xml.WriteAttributeString("RZ", "Yes");
        }

        private void writeDatabaseFormat(XmlWriter xml)
        {
            xml.WriteAttributeString("UnitsCurr", "Yes");
            xml.WriteAttributeString("OverrideE", "No");
        }

        private void writeSavedTable(XmlWriter xml)
        {
            xml.WriteAttributeString("SaveFile", "Yes");
            xml.WriteAttributeString("FileName", "results.mdb");
            xml.WriteAttributeString("NamedSet", "RESULTS");
            xml.WriteAttributeString("Group", "ALL");
        }

        private void writeMassSource(XmlWriter xml)
        {
            xml.WriteAttributeString("MassFrom", "Elements");
        }

        //private void writeCableSecDefinitions(XmlWriter xml) {
        //    xml.WriteStartElement("CableSect");
        //    xml.WriteAttributeString("CableSect", " ");
        //    xml.WriteAttributeString("Material", " ");
        //    xml.WriteAttributeString("Specify", " ");
        //    xml.WriteAttributeString("Diameter", " ");
        //    xml.WriteAttributeString("Area", " ");
        //    xml.WriteAttributeString("TorsConst", " ");
        //    xml.WriteAttributeString("I", " ");
        //    xml.WriteAttributeString("AS", " ");
        //    xml.WriteAttributeString("Color", " ");
        //    xml.WriteAttributeString("TotalWt", " ");
        //    xml.WriteAttributeString("TotalMass", " ");
        //    xml.WriteAttributeString("AMod", " ");
        //    xml.WriteAttributeString("A2Mod", " ");
        //    xml.WriteAttributeString("A3Mod", " ");
        //    xml.WriteAttributeString("JMod", " ");
        //    xml.WriteAttributeString("I2Mod", " ");
        //    xml.WriteAttributeString("I3Mod", " ");
        //    xml.WriteAttributeString("MMod", " ");
        //    xml.WriteAttributeString("WMod", " ");
        //    xml.WriteEndElement();
        //}

        private void writeNamedSets1(XmlWriter xml)
        {
            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SortOrder", "Elem, Cases");
            xml.WriteAttributeString("Unformatted", "No");
            xml.WriteAttributeString("ModeStart", "1");
            xml.WriteAttributeString("ModeEnd", "All");
            xml.WriteAttributeString("ModalHist", "Envelopes");
            xml.WriteAttributeString("DirectHist", "Envelopes");
            xml.WriteAttributeString("NLStatic", "Envelopes");
            xml.WriteAttributeString("BaseReacX", "0");
            xml.WriteAttributeString("BaseReacY", "0");
            xml.WriteAttributeString("BaseReacZ", "0");
            xml.WriteAttributeString("Combo", "Envelopes");
            xml.WriteAttributeString("Steady", "Envelopes");
            xml.WriteAttributeString("SteadyOpt", "Phases");
            xml.WriteAttributeString("PSD", "RMS");
            xml.WriteAttributeString("Multistep", "Envelopes");
            xml.WriteAttributeString("NumTables", "18");
            xml.WriteAttributeString("NumLoads", "1");
            xml.WriteAttributeString("NumCases", "2");
            xml.WriteAttributeString("NumGenDispl", "0");
            xml.WriteAttributeString("NumSectCuts", "0");
            xml.WriteAttributeString("NumVWSets", "0");
            xml.WriteAttributeString("NumNLSSets", "0");
            xml.WriteAttributeString("NumRSSets", "0");
            xml.WriteAttributeString("NumPFSets", "0");
            xml.WriteEndElement();
        }

        //private void writeAutoMesh(XmlWriter xml) {
        //    xml.WriteStartElement("Frame");
        //    xml.WriteAttributeString("Name", " ");
        //    xml.WriteAttributeString("AutoMesh", " ");
        //    xml.WriteAttributeString("AtJoints", " ");
        //    xml.WriteAttributeString("AtFrames", " ");
        //    xml.WriteAttributeString("NumSegments", " ");
        //    xml.WriteAttributeString("MaxLength", " ");
        //    xml.WriteAttributeString("MaxDegrees", " ");
        //    xml.WriteEndElement();
        //}

        private void writeRebarSizes(XmlWriter xml)
        {
            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#2");
            xml.WriteAttributeString("Area", "0.000032");
            xml.WriteAttributeString("Diameter", "0.00635");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#3");
            xml.WriteAttributeString("Area", "0.000071");
            xml.WriteAttributeString("Diameter", "0.009525");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#4");
            xml.WriteAttributeString("Area", "0.000129");
            xml.WriteAttributeString("Diameter", "0.0127");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#5");
            xml.WriteAttributeString("Area", "0.0002");
            xml.WriteAttributeString("Diameter", "0.015875");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#6");
            xml.WriteAttributeString("Area", "0.000284");
            xml.WriteAttributeString("Diameter", "0.01905");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#7");
            xml.WriteAttributeString("Area", "0.000387");
            xml.WriteAttributeString("Diameter", "0.022225");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#8");
            xml.WriteAttributeString("Area", "0.00051");
            xml.WriteAttributeString("Diameter", "0.0254");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#9");
            xml.WriteAttributeString("Area", "0.000645");
            xml.WriteAttributeString("Diameter", "0.028651");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#10");
            xml.WriteAttributeString("Area", "0.000819");
            xml.WriteAttributeString("Diameter", "0.032258");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#11");
            xml.WriteAttributeString("Area", "0.001006");
            xml.WriteAttributeString("Diameter", "0.035814");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#14");
            xml.WriteAttributeString("Area", "0.001452");
            xml.WriteAttributeString("Diameter", "0.043002");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "#18");
            xml.WriteAttributeString("Area", "0.002581");
            xml.WriteAttributeString("Diameter", "0.057328");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "10M");
            xml.WriteAttributeString("Area", "0.0001");
            xml.WriteAttributeString("Diameter", "0.0113");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "15M");
            xml.WriteAttributeString("Area", "0.0002");
            xml.WriteAttributeString("Diameter", "0.016");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "20M");
            xml.WriteAttributeString("Area", "0.0003");
            xml.WriteAttributeString("Diameter", "0.0195");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "25M");
            xml.WriteAttributeString("Area", "0.0005");
            xml.WriteAttributeString("Diameter", "0.0252");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "30M");
            xml.WriteAttributeString("Area", "0.0007");
            xml.WriteAttributeString("Diameter", "0.0299");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "35M");
            xml.WriteAttributeString("Area", "0.001");
            xml.WriteAttributeString("Diameter", "0.0357");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "45M");
            xml.WriteAttributeString("Area", "0.0015");
            xml.WriteAttributeString("Diameter", "0.0437");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "55M");
            xml.WriteAttributeString("Area", "0.0025");
            xml.WriteAttributeString("Diameter", "0.0564");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "6d");
            xml.WriteAttributeString("Area", "0.000028");
            xml.WriteAttributeString("Diameter", "0.006");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "8d");
            xml.WriteAttributeString("Area", "0.00005");
            xml.WriteAttributeString("Diameter", "0.008");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "10d");
            xml.WriteAttributeString("Area", "0.000079");
            xml.WriteAttributeString("Diameter", "0.01");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "12d");
            xml.WriteAttributeString("Area", "0.000113");
            xml.WriteAttributeString("Diameter", "0.012");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "14d");
            xml.WriteAttributeString("Area", "0.000154");
            xml.WriteAttributeString("Diameter", "0.014");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "16d");
            xml.WriteAttributeString("Area", "0.000201");
            xml.WriteAttributeString("Diameter", "0.016");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "20d");
            xml.WriteAttributeString("Area", "0.000314");
            xml.WriteAttributeString("Diameter", "0.02");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "25d");
            xml.WriteAttributeString("Area", "0.000491");
            xml.WriteAttributeString("Diameter", "0.025");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "26d");
            xml.WriteAttributeString("Area", "0.000531");
            xml.WriteAttributeString("Diameter", "0.026");
            xml.WriteEndElement();

            xml.WriteStartElement("Rebar");
            xml.WriteAttributeString("RebarID", "28d");
            xml.WriteAttributeString("Area", "0.000616");
            xml.WriteAttributeString("Diameter", "0.028");
            xml.WriteEndElement();
        }

        /// <summary>
        /// Create nodes in XML for joint elements
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="obj"></param>
        private void writeNode(XmlWriter xml, ItemList<Joint> obj)
        {
            xml.WriteStartElement("Joint_Coordinates");
            foreach (Item i in obj)
                if ((i is Joint) && (i != null))
                    writeJoints(xml, (Joint)i);
            xml.WriteEndElement();

            xml.WriteStartElement("Joint_Added_Mass_Assignments");
            foreach (Item i in obj)
                if ((i is Joint) && (i != null))
                    writeMasses(xml, (Joint)i);
            xml.WriteEndElement();

            xml.WriteStartElement("Joint_Restraint_Assignments");
            foreach (Item i in obj)
                if ((i is Joint) && (i != null))
                    writeRestraints(xml, (Joint)i);
            xml.WriteEndElement();

            xml.WriteStartElement("Joint_Spring_Assignments_1_-_Uncoupled");
            foreach (Item i in obj)
                if ((i is Joint) && (i != null))
                    writeSprings(xml, (Joint)i);
            xml.WriteEndElement();

            xml.WriteStartElement("Joint_Loads_-_Force");
            foreach (Item i in obj)
                if ((i is Joint) && (i != null))
                    writeJointForces(xml, (Joint)i);
            xml.WriteEndElement();

            xml.WriteStartElement("Joint_Loads_-_Ground_Displacement");
            foreach (Item i in obj)
                if ((i is Joint) && (i != null))
                    writeLoadGroundDisplacements(xml, (Joint)i);
            xml.WriteEndElement();
        }

        private void writeJoints(XmlWriter xml, Joint obj)
        {
            Microsoft.DirectX.Vector3 pos = obj.Position;
            xml.WriteStartElement("Joint");
            xml.WriteAttributeString("Joint", obj.Id.ToString());
            xml.WriteAttributeString("CoordSys", "GLOBAL");
            xml.WriteAttributeString("CoordType", "Cartesian");
            xml.WriteAttributeString("XorR", pos.X.ToString());
            xml.WriteAttributeString("Y", pos.Y.ToString());
            xml.WriteAttributeString("Z", pos.Z.ToString());
            xml.WriteAttributeString("SpecialJt", "Yes");
            xml.WriteAttributeString("GlobalX", pos.X.ToString());
            xml.WriteAttributeString("GlobalY", pos.Y.ToString());
            xml.WriteAttributeString("GlobalZ", pos.Z.ToString());
            xml.WriteEndElement();
        }

        private void writeMasses(XmlWriter xml, Joint obj)
        {
            float[] masses = obj.Masses;
            if (masses != null && masses.Length >= 6)
            {
                if (masses[0] + masses[1] + masses[2] + masses[3] + masses[4] + masses[5] > float.Epsilon)
                {
                    xml.WriteStartElement("Joint");
                    xml.WriteAttributeString("Joint", obj.Id.ToString());
                    xml.WriteAttributeString("CoordSys", "GLOBAL");
                    xml.WriteAttributeString("Mass1", masses[0].ToString());
                    xml.WriteAttributeString("Mass2", masses[1].ToString());
                    xml.WriteAttributeString("Mass3", masses[2].ToString());
                    xml.WriteAttributeString("MMI1", masses[3].ToString());
                    xml.WriteAttributeString("MMI2", masses[4].ToString());
                    xml.WriteAttributeString("MMI3", masses[5].ToString());
                    xml.WriteEndElement();
                }
            }
        }

        private void writeRestraints(XmlWriter xml, Joint obj)
        {
            JointDOF dof = obj.DoF;
            if (dof != null)
            {
                if (dof.IsRestrained)
                {
                    xml.WriteStartElement("Joint");
                    xml.WriteAttributeString("Joint", obj.Id.ToString());
                    xml.WriteAttributeString("U1", (dof.T1 == JointDOF.DofType.Restrained) ? "Yes" : "No");
                    xml.WriteAttributeString("U2", (dof.T2 == JointDOF.DofType.Restrained) ? "Yes" : "No");
                    xml.WriteAttributeString("U3", (dof.T3 == JointDOF.DofType.Restrained) ? "Yes" : "No");
                    xml.WriteAttributeString("R1", (dof.R1 == JointDOF.DofType.Restrained) ? "Yes" : "No");
                    xml.WriteAttributeString("R2", (dof.R2 == JointDOF.DofType.Restrained) ? "Yes" : "No");
                    xml.WriteAttributeString("R3", (dof.R3 == JointDOF.DofType.Restrained) ? "Yes" : "No");
                    xml.WriteEndElement();
                }
            }
        }

        private void writeSprings(XmlWriter xml, Joint obj)
        {
            AssignedLoads loads = obj.Loads;
            if (loads != null)
            {
                if (obj.DoF.IsSpring)
                {
                    float[] sp = obj.DoF.SpringValues;
                    xml.WriteStartElement("Joint");
                    xml.WriteAttributeString("Joint", obj.Id.ToString());
                    xml.WriteAttributeString("CoordSys", "GLOBAL");
                    xml.WriteAttributeString("U1", sp[0].ToString());
                    xml.WriteAttributeString("U2", sp[1].ToString());
                    xml.WriteAttributeString("U3", sp[2].ToString());
                    xml.WriteAttributeString("R1", sp[3].ToString());
                    xml.WriteAttributeString("R2", sp[4].ToString());
                    xml.WriteAttributeString("R3", sp[5].ToString());
                    xml.WriteEndElement();
                }
            }
        }

        private void writeJointForces(XmlWriter xml, Joint obj)
        {
            AssignedLoads loads = obj.Loads;
            if (loads != null)
            {
                Dictionary<string, LoadCase> cases = Canguro.Model.Model.Instance.LoadCases;
                foreach (LoadCase lCase in cases.Values)
                {
                    ItemList<Canguro.Model.Load.Load> list = loads[lCase];
                    if (list != null)
                    {
                        foreach (Canguro.Model.Load.Load load in list)
                        {
                            if (load != null)
                            {
                                if (load is JointLoad && load is ForceLoad)
                                {
                                    float[] force = ((ForceLoad)load).Force;
                                    xml.WriteStartElement("Joint");
                                    xml.WriteAttributeString("Joint", obj.Id.ToString());
                                    xml.WriteAttributeString("LoadCase", lCase.Name);
                                    xml.WriteAttributeString("CoordSys", "GLOBAL");
                                    xml.WriteAttributeString("F1", force[0].ToString());
                                    xml.WriteAttributeString("F2", force[1].ToString());
                                    xml.WriteAttributeString("F3", force[2].ToString());
                                    xml.WriteAttributeString("M1", force[3].ToString());
                                    xml.WriteAttributeString("M2", force[4].ToString());
                                    xml.WriteAttributeString("M3", force[5].ToString());
                                    xml.WriteEndElement();
                                }
                            }
                        }
                    }
                }
            }
        }

        private void writeLoadGroundDisplacements(XmlWriter xml, Joint obj)
        {
            AssignedLoads loads = obj.Loads;
            if (loads != null)
            {
                Dictionary<string, LoadCase> cases = Canguro.Model.Model.Instance.LoadCases;
                foreach (LoadCase lCase in cases.Values)
                {
                    ItemList<Canguro.Model.Load.Load> list = loads[lCase];
                    if (list != null)
                    {
                        foreach (Canguro.Model.Load.Load load in list)
                        {
                            if (load != null)
                            {
                                if (load is JointLoad && load is GroundDisplacementLoad)
                                {
                                    float[] disp = ((GroundDisplacementLoad)load).Displacements;
                                    xml.WriteStartElement("Joint");
                                    xml.WriteAttributeString("Joint", obj.Id.ToString());
                                    xml.WriteAttributeString("LoadCase", lCase.Name);
                                    xml.WriteAttributeString("CoordSys", "GLOBAL");
                                    xml.WriteAttributeString("U1", disp[0].ToString());
                                    xml.WriteAttributeString("U2", disp[1].ToString());
                                    xml.WriteAttributeString("U3", disp[2].ToString());
                                    xml.WriteAttributeString("R1", UnitSystem.UnitSystemsManager.Instance.CurrentSystem.Deg2Rad(disp[3]).ToString());
                                    xml.WriteAttributeString("R2", UnitSystem.UnitSystemsManager.Instance.CurrentSystem.Deg2Rad(disp[4]).ToString());
                                    xml.WriteAttributeString("R3", UnitSystem.UnitSystemsManager.Instance.CurrentSystem.Deg2Rad(disp[5]).ToString());
                                    xml.WriteEndElement();
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Create nodes in XML for frame elements
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="obj"></param>
        private void writeNode(XmlWriter xml, ItemList<LineElement> obj)
        {
            Dictionary<FrameSection, FrameSection> frameSectionCache = new Dictionary<FrameSection, FrameSection>();
            foreach (Section.Section sec in model.Sections)
                if (sec is FrameSection && !frameSectionCache.ContainsKey((FrameSection)sec))
                    frameSectionCache.Add((FrameSection)sec, (FrameSection)sec);

            xml.WriteStartElement("Connectivity_-_Frame");
            foreach (LineElement i in obj)
            {
                if (i != null)
                {
                    writeLines(xml, i);
                    LineProps props = i.Properties;
                    if (props != null && props is StraightFrameProps)
                    {
                        FrameSection sec = ((StraightFrameProps)props).Section;
                        if (!frameSectionCache.ContainsKey(sec))
                            frameSectionCache.Add(sec, sec);
                    }
                }
            }
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Section_Assignments");
            foreach (LineElement i in obj)
                if (i != null)
                    writeLineAssigments(xml, i);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Release_Assignments_1_-_General");
            foreach (LineElement i in obj)
                if (i != null)
                    writeReleaseAssignments(xml, i);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Release_Assignments_2_-_Partial_Fixity");
            foreach (LineElement i in obj)
                if (i != null)
                    writeSpringAssignments(xml, i);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Local_Axes_Assignments_1_-_Typical");
            foreach (LineElement i in obj)
                if (i != null)
                    writeAngleAssignments(xml, i);
            xml.WriteEndElement();

            writeFrameInsertionPointAssignments(xml, obj);
            writeFrameOffsetAssignments(xml, obj);

            //////////////////////////////////
            // Codigo de claudio para releases
            //
            //foreach (LineElement i in obj)
            //    if (i != null && (!i.DoFI.IsRestrained) || (!i.DoFJ.IsRestrained))
            //        writeRelease(i);
            //xml.WriteEndElement();
            // Codigo de claudio para resortes en frames
            //xml.WriteStartElement("FrameSprings");
            //foreach (LineElement i in obj)
            //    if (i != null && (i.DoFI.IsSpring) || (i.DoFJ.IsSpring))
            //        writeSpring(i);
            //xml.WriteEndElement();
            ///////////////////////////////////

            foreach (LineElement i in obj)
            {
                if (i != null)
                {
                    LineProps props = i.Properties;
                    List<Section.Section> exported = new List<Section.Section>();
                    if (props is StraightFrameProps && (((StraightFrameProps)props).Section.ConcreteProperties is ConcreteBeamSectionProps) == false &&
                       (((StraightFrameProps)props).Section.ConcreteProperties is ConcreteColumnSectionProps) == false)
                        exported.Add(((StraightFrameProps)props).Section);
                }
            }

            xml.WriteStartElement("Frame_Loads_-_Point");
            foreach (LineElement i in obj)
                if (i != null)
                    writeLinePointForces(xml, i);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Loads_-_Distributed");
            foreach (LineElement i in obj)
                if (i != null)
                    writeLineDistributedForces(xml, i);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Loads_-_Temperature");
            foreach (LineElement i in obj)
                if (i != null)
                    writeLineTemperatureLoads(xml, i);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Section_Properties_01_-_General");
            foreach (FrameSection fs in model.Sections)
                if (fs != null)
                    writeFrameSection(xml, fs);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Section_Properties_03_-_Concrete_Beam");
            foreach (FrameSection fs in model.Sections)
                if (fs != null)
                    writeConcreteBeamAssigments(xml, fs);
            xml.WriteEndElement();

            xml.WriteStartElement("Frame_Section_Properties_02_-_Concrete_Column");
            foreach (FrameSection fs in model.Sections)
                if (fs != null)
                    writeConcreteColumnSectionProps(xml, fs);
            xml.WriteEndElement();
        }

        private void writeLines(XmlWriter xml, LineElement obj)
        {
            Joint i = obj.I;
            Joint j = obj.J;
            xml.WriteStartElement("Frame");
            xml.WriteAttributeString("Frame", obj.Id.ToString());
            xml.WriteAttributeString("JointI", i.Id.ToString());
            xml.WriteAttributeString("JointJ", j.Id.ToString());
            xml.WriteAttributeString("IsCurved", "No");
            xml.WriteAttributeString("Length", obj.Length.ToString());
            xml.WriteAttributeString("CentroidX", ((i.X + j.X) / 2.0F).ToString());
            xml.WriteAttributeString("CentroidY", ((i.Y + j.Y) / 2.0F).ToString());
            xml.WriteAttributeString("CentroidZ", ((i.Z + j.Z) / 2.0F).ToString());
            xml.WriteEndElement();
        }

        private void writeLineAssigments(XmlWriter xml, LineElement obj)
        {
            LineProps props = obj.Properties;
            List<Section.Section> exported = new List<Section.Section>();
            if (props is StraightFrameProps)
            {
                FrameSection sec = ((StraightFrameProps)props).Section;
                xml.WriteStartElement("Frame");
                xml.WriteAttributeString("Frame", obj.Id.ToString());
                xml.WriteAttributeString("SectionType", secShape(sec.Shape));
                xml.WriteAttributeString("AutoSelect", "N.A.");
                xml.WriteAttributeString("AnalSect", sec.Name);
                xml.WriteAttributeString("DesignSect", sec.Name);
                xml.WriteAttributeString("MatProp", "Default");
                xml.WriteEndElement();
            }
        }

        public static void writeConcreteBeamAssigments(XmlWriter xml, FrameSection sec)
        {
            ConcreteSectionProps concrete = sec.ConcreteProperties;
            if (concrete != null && sec.ConcreteProperties is ConcreteBeamSectionProps)
            {
                string mat = MaterialManager.Instance.DefaultSteel.Name;
                ConcreteBeamSectionProps concreteBeam = (ConcreteBeamSectionProps)concrete;
                xml.WriteStartElement("SectionName");
                xml.WriteAttributeString("SectionName", sec.Name);
                xml.WriteAttributeString("RebarMatL", mat);
                xml.WriteAttributeString("RebarMatC", mat);
                xml.WriteAttributeString("TopCover", concreteBeam.ConcreteCoverTop.ToString());
                xml.WriteAttributeString("BotCover", concreteBeam.ConcreteCoverBottom.ToString());
                xml.WriteAttributeString("TopLeftArea", concreteBeam.RoTopLeft.ToString());
                xml.WriteAttributeString("TopRghtArea", concreteBeam.RoTopRight.ToString());
                xml.WriteAttributeString("BotLeftArea", concreteBeam.RoBottomLeft.ToString());
                xml.WriteAttributeString("BotRghtArea", concreteBeam.RoBottomRight.ToString());
                xml.WriteEndElement();
            }
        }

        public static void writeConcreteColumnSectionProps(XmlWriter xml, FrameSection sec)
        {
            ConcreteSectionProps concrete = sec.ConcreteProperties;
            if (concrete != null && sec.ConcreteProperties is ConcreteColumnSectionProps)
            {
                ConcreteColumnSectionProps concreteColum = (ConcreteColumnSectionProps)concrete;
                string mat = MaterialManager.Instance.DefaultSteel.Name;
                string bars3, bars2, barsCirc;

                if (sec is Rectangular)
                {
                    bars2 = concreteColum.NumberOfBars2Dir.ToString();
                    bars3 = concreteColum.NumberOfBars3Dir.ToString();
                    barsCirc = "0";
                }
                else
                { //rounded
                    bars2 = "0";
                    bars3 = "0";
                    barsCirc = concreteColum.NumberOfBars.ToString();
                }
                string barsize = concreteColum.BarSize.ToString();

                xml.WriteStartElement("SectionName");
                xml.WriteAttributeString("SectionName", sec.Name);
                xml.WriteAttributeString("RebarMatL", mat);
                xml.WriteAttributeString("RebarMatC", mat);
                xml.WriteAttributeString("ReinfConfig", concreteColum.RConfiguration.ToString());
                xml.WriteAttributeString("LatReinf", concreteColum.LateralR.ToString());
                xml.WriteAttributeString("Cover", concreteColum.CoverToRebarCenter.ToString());
                xml.WriteAttributeString("NumBars3Dir", bars3);
                xml.WriteAttributeString("NumBars2Dir", bars2);
                xml.WriteAttributeString("NumBarsCirc", barsCirc);
                xml.WriteAttributeString("BarSize", barsize);
                xml.WriteAttributeString("SpacingC", concreteColum.SpacingC.ToString());
                xml.WriteAttributeString("NumCBars2", bars2);
                xml.WriteAttributeString("NumCBars3", bars3);
                xml.WriteAttributeString("ReinfType", "Design");
                xml.WriteEndElement();
            }
        }

        private void writeReleaseAssignments(XmlWriter xml, LineElement obj)
        {
            JointDOF dofi = obj.DoFI;
            JointDOF dofj = obj.DoFJ;

            if (dofi.IsFree || dofj.IsFree || dofi.IsSpring || dofj.IsSpring)
            {
                xml.WriteStartElement("Frame");
                xml.WriteAttributeString("Frame", obj.Id.ToString());
                xml.WriteAttributeString("PI", (dofi.T1 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("V2I", (dofi.T2 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("V3I", (dofi.T3 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("TI", (dofi.R1 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("M2I", (dofi.R2 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("M3I", (dofi.R3 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("PJ", (dofj.T1 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("V2J", (dofj.T2 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("V3J", (dofj.T3 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("TJ", (dofj.R1 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("M2J", (dofj.R2 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("M3J", (dofj.R3 != JointDOF.DofType.Restrained) ? "Yes" : "No");
                xml.WriteAttributeString("PartialFix", (dofi.IsSpring || dofj.IsSpring) ? "Yes" : "No");
                xml.WriteEndElement();
            }
        }

        private void writeSpringAssignments(XmlWriter xml, LineElement obj)
        {
            JointDOF dofi = obj.DoFI;
            JointDOF dofj = obj.DoFJ;
            string[] str = new string[] { "PI", "V2I", "V3I", "TI", "M2I", "M3I", "PJ", "V2J", "V3J", "TJ", "M2J", "M3J" };

            if (dofi.IsSpring || dofj.IsSpring)
            {
                xml.WriteStartElement("Frame");
                float[] dofiValues = dofi.SpringValues;
                float[] dofjValues = dofj.SpringValues;

                xml.WriteAttributeString("Frame", obj.Id.ToString());

                for (int i = 0; i < 6; i++)
                    if (dofiValues[i] > 0)
                        xml.WriteAttributeString(str[i], dofiValues[i].ToString());

                for (int i = 0; i < 6; i++)
                    if (dofjValues[i] > 0)
                        xml.WriteAttributeString(str[i + 6], dofjValues[i].ToString());

                xml.WriteEndElement();
            }
        }

        private void writeAngleAssignments(XmlWriter xml, LineElement obj)
        {
            if (obj.Angle != 0f)
            {
                xml.WriteStartElement("Frame");
                xml.WriteAttributeString("Frame", obj.Id.ToString());
                xml.WriteAttributeString("Angle", obj.Angle.ToString());
                xml.WriteAttributeString("MirrorAbt2", "No");
                xml.WriteAttributeString("MirrorAbt3", "No");
                xml.WriteAttributeString("AdvanceAxes", "No");
                xml.WriteEndElement();
            }
        }

        private void writeLinePointForces(XmlWriter xml, LineElement obj)
        {
            AssignedLoads loads = obj.Loads;
            if (loads != null)
            {
                Dictionary<string, LoadCase> cases = Canguro.Model.Model.Instance.LoadCases;
                foreach (LoadCase lCase in cases.Values)
                {
                    ItemList<Canguro.Model.Load.Load> list = loads[lCase];
                    if (list != null)
                    {
                        foreach (Canguro.Model.Load.Load load in list)
                        {
                            if (load != null)
                            {
                                if (load is DirectionalLineLoad)
                                {
                                    string dir = ((DirectionalLineLoad)load).Direction.ToString();
                                    string dirFrame = "GLOBAL";
                                    if (((DirectionalLineLoad)load).Direction != LineLoad.LoadDirection.Gravity)
                                    {
                                        dirFrame = dir.Substring(0, dir.Length - 1).ToUpper();
                                        dir = dir.Substring(dir.Length - 1);
                                    }
                                    if (load is ConcentratedSpanLoad)
                                    {
                                        ConcentratedSpanLoad point = (ConcentratedSpanLoad)load;
                                        xml.WriteStartElement("Frame");
                                        xml.WriteAttributeString("Frame", obj.Id.ToString());
                                        xml.WriteAttributeString("LoadCase", lCase.Name);
                                        xml.WriteAttributeString("CoordSys", dirFrame);
                                        xml.WriteAttributeString("Type", point.Type.ToString());
                                        xml.WriteAttributeString("Dir", dir);
                                        xml.WriteAttributeString("DistType", "RelDist");
                                        xml.WriteAttributeString("RelDist", point.D.ToString());
                                        xml.WriteAttributeString("AbsDist", "0");
                                        xml.WriteAttributeString("Force", point.LoadInt.ToString());
                                        xml.WriteEndElement();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void writeLineDistributedForces(XmlWriter xml, LineElement obj)
        {
            AssignedLoads loads = obj.Loads;
            if (loads != null)
            {
                Dictionary<string, LoadCase> cases = Canguro.Model.Model.Instance.LoadCases;
                foreach (LoadCase lCase in cases.Values)
                {
                    ItemList<Canguro.Model.Load.Load> list = loads[lCase];
                    if (list != null)
                    {
                        foreach (Canguro.Model.Load.Load load in list)
                        {
                            if (load != null)
                            {
                                if (load is DirectionalLineLoad)
                                {
                                    string dir = ((DirectionalLineLoad)load).Direction.ToString();
                                    string dirFrame = "GLOBAL";
                                    if (((DirectionalLineLoad)load).Direction != LineLoad.LoadDirection.Gravity)
                                    {
                                        dirFrame = dir.Substring(0, dir.Length - 1).ToUpper();
                                        dir = dir.Substring(dir.Length - 1);
                                    }
                                    if (load is DistributedSpanLoad)
                                    {
                                        DistributedSpanLoad dist = (DistributedSpanLoad)load;
                                        xml.WriteStartElement("Frame");
                                        xml.WriteAttributeString("Frame", obj.Id.ToString());
                                        xml.WriteAttributeString("LoadCase", lCase.Name);
                                        xml.WriteAttributeString("CoordSys", dirFrame);
                                        xml.WriteAttributeString("Type", dist.Type.ToString());
                                        xml.WriteAttributeString("Dir", dir);
                                        xml.WriteAttributeString("DistType", "RelDist");
                                        xml.WriteAttributeString("RelDistA", dist.Da.ToString());
                                        xml.WriteAttributeString("RelDistB", dist.Db.ToString());
                                        xml.WriteAttributeString("AbsDistA", "0");
                                        xml.WriteAttributeString("AbsDistB", "0");
                                        xml.WriteAttributeString("FOverLA", dist.LoadAInt.ToString());
                                        xml.WriteAttributeString("FOverLB", dist.LoadBInt.ToString());
                                        xml.WriteEndElement();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void writeLineTemperatureLoads(XmlWriter xml, LineElement obj)
        {
            AssignedLoads loads = obj.Loads;
            if (loads != null)
            {
                Dictionary<string, LoadCase> cases = Canguro.Model.Model.Instance.LoadCases;
                foreach (LoadCase lCase in cases.Values)
                {
                    ItemList<Canguro.Model.Load.Load> list = loads[lCase];
                    if (list != null)
                    {
                        foreach (Canguro.Model.Load.Load load in list)
                        {
                            if (load != null && load is TemperatureLineLoad)
                            {
                                xml.WriteStartElement("Frame");
                                xml.WriteAttributeString("Frame", obj.Id.ToString());
                                xml.WriteAttributeString("LoadCase", lCase.Name);
                                if (load is TemperatureGradientLineLoad)
                                {
                                    if (((TemperatureGradientLineLoad)load).LoadType == TemperatureGradientLineLoad.GradientDirection.G33)
                                    {
                                        xml.WriteAttributeString("Type", "Gradient3");
                                        xml.WriteAttributeString("TempGrad3", ((TemperatureGradientLineLoad)load).Temperature.ToString());
                                    }
                                    else
                                    {
                                        xml.WriteAttributeString("Type", "Gradient2");
                                        xml.WriteAttributeString("TempGrad2", ((TemperatureGradientLineLoad)load).Temperature.ToString());
                                    }
                                }
                                else
                                {
                                    xml.WriteAttributeString("Type", "Temperature");
                                    xml.WriteAttributeString("Temp", ((TemperatureLineLoad)load).Temperature.ToString());
                                }
                                xml.WriteAttributeString("JtPattern", "None");
                                xml.WriteEndElement();
                            }
                        }
                    }
                }
            }
        }

        public static void writeFrameSection(XmlWriter xml, FrameSection obj)
        {
            ConcreteSectionProps cprops = obj.ConcreteProperties;
            string concC = (cprops != null && cprops is ConcreteColumnSectionProps) ? "Yes" : "No";
            string concB = (cprops != null && cprops is ConcreteBeamSectionProps) ? "Yes" : "No";

            xml.WriteStartElement("SectionName");
            xml.WriteAttributeString("SectionName", obj.Name);
            xml.WriteAttributeString("Material", obj.Material.Name);
            xml.WriteAttributeString("Shape", secShape(obj.Shape));
            xml.WriteAttributeString("t3", obj.T3.ToString());
            xml.WriteAttributeString("t2", obj.T2.ToString());
            xml.WriteAttributeString("tf", obj.Tf.ToString());
            xml.WriteAttributeString("tw", obj.Tw.ToString());
            xml.WriteAttributeString("t2b", obj.T2b.ToString());
            xml.WriteAttributeString("tfb", obj.Tfb.ToString());
            xml.WriteAttributeString("Area", obj.Area.ToString());
            xml.WriteAttributeString("TorsConst", obj.TorsConst.ToString());
            xml.WriteAttributeString("I33", obj.I33.ToString());
            xml.WriteAttributeString("I22", obj.I22.ToString());
            xml.WriteAttributeString("AS2", obj.As2.ToString());
            xml.WriteAttributeString("AS3", obj.As3.ToString());
            xml.WriteAttributeString("S33", obj.S33.ToString());
            xml.WriteAttributeString("S22", obj.S22.ToString());
            xml.WriteAttributeString("Z33", obj.Z33.ToString());
            xml.WriteAttributeString("Z22", obj.Z22.ToString());
            xml.WriteAttributeString("R33", obj.R33.ToString());
            xml.WriteAttributeString("R22", obj.R22.ToString());
            xml.WriteAttributeString("ConcCol", concC);
            xml.WriteAttributeString("ConcBeam", concB);
            xml.WriteAttributeString("Color", "Yellow");
            xml.WriteAttributeString("TotalWt", "0");
            xml.WriteAttributeString("TotalMass", "0");
            xml.WriteAttributeString("FromFile", "No");
            xml.WriteAttributeString("AMod", "1");
            xml.WriteAttributeString("A2Mod", "1");
            xml.WriteAttributeString("A3Mod", "1");
            xml.WriteAttributeString("JMod", "1");
            xml.WriteAttributeString("I2Mod", "1");
            xml.WriteAttributeString("I3Mod", "1");
            xml.WriteAttributeString("MMod", "1");
            xml.WriteAttributeString("WMod", "1");
            xml.WriteAttributeString("SectInFile", " ");
            xml.WriteAttributeString("FileName", " ");
            xml.WriteEndElement();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        private void writeNode(XmlWriter xml)
        {
            xml.WriteStartElement("Material_Properties_01_-_General");
            foreach (Material.Material mat in MaterialManager.Instance.Materials.AsReadOnly())
                if (mat != null)
                    writeMaterial(xml, mat);
            xml.WriteEndElement();

            xml.WriteStartElement("Material_Properties_04_-_Design_Concrete");
            foreach (Material.Material mat in MaterialManager.Instance.Materials.AsReadOnly())
                if (mat != null)
                    writeConcreteDesignProps(xml, mat);
            xml.WriteEndElement();

            xml.WriteStartElement("Material_Properties_11_-_Design_Rebar");
            foreach (Material.Material mat in MaterialManager.Instance.Materials.AsReadOnly())
                if (mat != null)
                    writeRebarDesignProps(xml, mat);
            xml.WriteEndElement();

            xml.WriteStartElement("Material_Properties_05_-_Design_Aluminum");
            foreach (Material.Material mat in MaterialManager.Instance.Materials.AsReadOnly())
                if (mat != null)
                    writeAluminumDesignProps(xml, mat);
            xml.WriteEndElement();

            xml.WriteStartElement("Material_Properties_06_-_Design_ColdFormed");
            foreach (Material.Material mat in MaterialManager.Instance.Materials.AsReadOnly())
                if (mat != null)
                    writeColdFormedDesignProps(xml, mat);
            xml.WriteEndElement();

            xml.WriteStartElement("Material_Properties_03_-_Design_Steel");
            foreach (Material.Material mat in MaterialManager.Instance.Materials.AsReadOnly())
                if (mat != null)
                    writeSteelDesignProps(xml, mat);
            xml.WriteEndElement();
        }

        private void writeMaterial(XmlWriter xml, Material.Material mat)
        {
            MaterialTypeProps tProps = mat.TypeProperties;
            MaterialDesignProps dProps = mat.DesignProperties;
            double e, u, a;
            string type = "";
            string design = (dProps is RebarDesignProps) ? "Rebar" :
                (dProps is ColdFormedDesignProps) ? "ColdFormed" :
                (dProps is SteelDesignProps) ? "Steel" :
                (dProps is ConcreteDesignProps) ? "Concrete" :
                (dProps is AluminumDesignProps) ? "Aluminum" : "None";
            if (tProps is IsotropicTypeProps)
            {
                IsotropicTypeProps iProps = tProps as IsotropicTypeProps;
                type = "Isotropic";
                e = iProps.E;
                u = iProps.Nu;
                a = iProps.Alpha;
            }
            else if (tProps is UniaxialTypeProps)
            {
                UniaxialTypeProps uProps = tProps as UniaxialTypeProps;
                type = "Uniaxial";
                e = uProps.E;
                u = 0.0;
                a = uProps.A;
            }
            else
            {
                e = u = a = 0.0;
                type = (tProps is OrthotropicTypeProps) ? "Orthotropic" : "Anisotropic";
            }
            xml.WriteStartElement("Material");
            xml.WriteAttributeString("Material", mat.Name);
            xml.WriteAttributeString("Type", type);
            xml.WriteAttributeString("DesignType", design);
            xml.WriteAttributeString("UnitMass", mat.Density.ToString());
            xml.WriteAttributeString("UnitWeight", mat.UnitWeight.ToString());
            xml.WriteAttributeString("E", e.ToString());
            xml.WriteAttributeString("U", u.ToString());
            xml.WriteAttributeString("A", a.ToString());
            xml.WriteAttributeString("MDampRatio", "0");
            xml.WriteAttributeString("VDampMass", "0");
            xml.WriteAttributeString("VDampStiff", "0");
            xml.WriteAttributeString("HDampMass", "0");
            xml.WriteAttributeString("HDampStiff", "0");
            xml.WriteAttributeString("NumAdvance", "0");
            xml.WriteAttributeString("Color", "Yellow");
//            xml.WriteAttributeString("TempDepend", CodeYN(!(mat.DesignProperties is RebarDesignProps)));
            xml.WriteEndElement();
        }

        private void writeConcreteDesignProps(XmlWriter xml, Material.Material mat)
        {
            MaterialDesignProps dProps = mat.DesignProperties;
            if (dProps is ConcreteDesignProps)
            {
                ConcreteDesignProps props = (ConcreteDesignProps)dProps;
                string isLW = (props.IsLightweightConcrete) ? "Yes" : "No";

                xml.WriteStartElement("Material");
                xml.WriteAttributeString("Material", mat.Name);
                xml.WriteAttributeString("Fc", props.Fc.ToString());
                xml.WriteAttributeString("RebarFy", props.RebarFy.ToString());
                xml.WriteAttributeString("RebarFys", props.RebarFys.ToString());
                xml.WriteAttributeString("LtWtConc", isLW);
                xml.WriteAttributeString("LtWtFact", props.LightweightFactor.ToString());
                xml.WriteEndElement();
            }
        }

        private void writeRebarDesignProps(XmlWriter xml, Material.Material mat)
        {
            MaterialDesignProps dProps = mat.DesignProperties;
            if (dProps is RebarDesignProps)
            {
                RebarDesignProps props = (RebarDesignProps)dProps;
                xml.WriteStartElement("Material");
                xml.WriteAttributeString("Material", mat.Name);
                xml.WriteAttributeString("Fy", props.Fy.ToString());
                xml.WriteAttributeString("Fu", props.Fu.ToString());
                xml.WriteEndElement();
            }
        }

        private void writeAluminumDesignProps(XmlWriter xml, Material.Material mat)
        {
            MaterialDesignProps dProps = mat.DesignProperties;
            if (dProps is AluminumDesignProps)
            {
                AluminumDesignProps props = (AluminumDesignProps)dProps;
                xml.WriteStartElement("Material");
                xml.WriteAttributeString("Material", mat.Name);
                xml.WriteAttributeString("AlumType", props.Type.ToString());
                xml.WriteAttributeString("Alloy", props.Alloy.ToString());
                xml.WriteAttributeString("Ftu", props.Ftu.ToString());
                xml.WriteAttributeString("Fty", props.Fty.ToString());
                xml.WriteAttributeString("Fcy", props.Fcy.ToString());
                xml.WriteAttributeString("Fsu", props.Fsu.ToString());
                xml.WriteAttributeString("Fsy", props.Fsy.ToString());
                xml.WriteEndElement();
            }
        }

        private void writeColdFormedDesignProps(XmlWriter xml, Material.Material mat)
        {
            MaterialDesignProps dProps = mat.DesignProperties;
            if (dProps is ColdFormedDesignProps)
            {
                ColdFormedDesignProps props = (ColdFormedDesignProps)dProps;
                xml.WriteStartElement("Material");
                xml.WriteAttributeString("Material", mat.Name);
                xml.WriteAttributeString("Fy", props.Fy.ToString());
                xml.WriteAttributeString("Fu", props.Fu.ToString());
                xml.WriteEndElement();
            }
        }

        private void writeSteelDesignProps(XmlWriter xml, Material.Material mat)
        {
            MaterialDesignProps dProps = mat.DesignProperties;
            if (dProps.GetType().Name.Equals("SteelDesignProps"))
            {
                SteelDesignProps props = (SteelDesignProps)dProps;
                xml.WriteStartElement("Material");
                xml.WriteAttributeString("Material", mat.Name);
                xml.WriteAttributeString("Fy", props.Fy.ToString());
                xml.WriteAttributeString("Fu", props.Fu.ToString());
                xml.WriteEndElement();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="m"></param>
        private void writeNode(XmlWriter xml, Canguro.Model.Model m)
        {
            xml.WriteStartElement("Analysis_Case_Definitions");
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is AnalysisCase)
                    writeAnalysisCase(xml, (AnalysisCase)aCase);
            xml.WriteEndElement();

            xml.WriteStartElement("Case_-_Static_1_-_Load_Assignments");
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is AnalysisCase)
                    writeStaticCase(xml, (AnalysisCase)aCase);
            xml.WriteEndElement();

            xml.WriteStartElement("Case_-_Modal_1_-_General");
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is AnalysisCase)
                    writeModalGeneralCase(xml, (AnalysisCase)aCase);
            xml.WriteEndElement();

            xml.WriteStartElement("Case_-_Modal_3_-_Load_Assignments_-_Ritz");
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is AnalysisCase)
                    writeModalCase(xml, (AnalysisCase)aCase);
            xml.WriteEndElement();

            xml.WriteStartElement("Case_-_Response_Spectrum_1_-_General");
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is AnalysisCase)
                    writeResponseSpectrumGeneralCase(xml, (AnalysisCase)aCase);
            xml.WriteEndElement();

            xml.WriteStartElement("Case_-_Response_Spectrum_2_-_Load_Assignments");
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is AnalysisCase)
                    writeResponseSpectrumLoadCase(xml, (AnalysisCase)aCase);
            xml.WriteEndElement();

            writeNonLinearLoadApplication(xml, m);
            writeNonLinearParameters(xml, m);

            xml.WriteStartElement("Combination_Definitions");
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is LoadCombination)
                    writeLoadCombinationCase(xml, (LoadCombination)aCase, m);
            xml.WriteEndElement();

            xml.WriteStartElement("Named_Sets_-_Database_Tables_2_-_Selections");
            writeNamedSets2(xml);
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is AnalysisCase)
                    writeNamedSets2(xml, (AnalysisCase)aCase);
            foreach (AbstractCase aCase in m.AbstractCases)
                if (aCase != null && aCase is LoadCombination)
                    writeNamedSets2(xml, (LoadCombination)aCase);

            ManagedDictionary<string, LoadCase> obj = m.LoadCases;
            foreach (LoadCase lCase in obj.Values)
                if (lCase != null)
                    writeNamedSets2(xml, lCase);
            xml.WriteEndElement();
        }

        private void writeAnalysisCase(XmlWriter xml, AnalysisCase aCase)
        {
            AnalysisCaseProps props = aCase.Properties;
            if (props is ResponseSpectrumCaseProps)
            {
                ResponseSpectrumCaseProps rProps = props as ResponseSpectrumCaseProps;
                xml.WriteStartElement("Case");
                xml.WriteAttributeString("Case", aCase.Name);
                xml.WriteAttributeString("Type", "LinRespSpec");
                xml.WriteAttributeString("InitialCond", " ");
                xml.WriteAttributeString("ModalCase", rProps.ModalAnalysisCase.ToString());
                xml.WriteAttributeString("RunCase", CodeYN(aCase.IsActive));
                xml.WriteEndElement();
            }
            else
            {
                string initial = "Zero";
                if (!(props is PDeltaCaseProps))
                    foreach (AbstractCase ac in model.AbstractCases)
                        if (ac is AnalysisCase && ((AnalysisCase)ac).Properties is PDeltaCaseProps)
                            initial = ac.Name;

                string type = (props is ModalCaseProps) ? "LinModal" : (props is PDeltaCaseProps) ? "NonStatic" : "LinStatic";
                xml.WriteStartElement("Case");
                xml.WriteAttributeString("Case", aCase.Name);
                xml.WriteAttributeString("Type", type);
                xml.WriteAttributeString("InitialCond", initial);
                xml.WriteAttributeString("ModalCase", " ");
                xml.WriteAttributeString("RunCase", CodeYN(aCase.IsActive));
                xml.WriteEndElement();
            }
        }

        private void writeStaticCase(XmlWriter xml, AnalysisCase aCase)
        {
            AnalysisCaseProps props = aCase.Properties;
            if (props is StaticCaseProps)
            {
                StaticCaseProps scprops = (StaticCaseProps)props;
                foreach (StaticCaseFactor factor in scprops.Loads)
                {
                    string lType, lName, sFact;
                    AnalysisCaseAppliedLoad appLoad = factor.AppliedLoad;

                    if (appLoad is AccelLoad)
                    {
                        lType = "Accel load";
                        lName = ((AccelLoad)appLoad).Value.ToString();
                        sFact = "1.0";
                    }
                    else
                    {
                        lType = "Load case";
                        lName = ((LoadCase)appLoad).Name;
                        sFact = factor.Factor.ToString();
                    }
                    xml.WriteStartElement("Case");
                    xml.WriteAttributeString("Case", aCase.Name);
                    xml.WriteAttributeString("LoadType", lType);
                    xml.WriteAttributeString("LoadName", lName);
                    xml.WriteAttributeString("LoadSF", sFact);
                    xml.WriteEndElement();
                }
            }
        }

        private void writeModalGeneralCase(XmlWriter xml, AnalysisCase aCase)
        {
            AnalysisCaseProps props = aCase.Properties;
            if (props is ModalCaseProps)
            {
                ModalCaseProps mcp = (ModalCaseProps)props;
                xml.WriteStartElement("Case");
                xml.WriteAttributeString("Case", aCase.Name);
                xml.WriteAttributeString("ModeType", mcp.ModesType.ToString());
                xml.WriteAttributeString("MaxNumModes", mcp.MaxModes.ToString());
                xml.WriteAttributeString("MinNumModes", mcp.MinModes.ToString());
                xml.WriteAttributeString("EigenShift", "0");
                xml.WriteAttributeString("EigenCutoff", "0");
                xml.WriteAttributeString("EigenTol", "0.000000001");
                xml.WriteAttributeString("AutoShift", "No");
                xml.WriteEndElement();
            }
        }

        private void writeNonLinearLoadApplication(XmlWriter xml, Model model)
        {
            xml.WriteStartElement("Case_-_Static_2_-_NonLinear_Load_Application");
            foreach (AbstractCase ac in model.AbstractCases)
                if (ac is AnalysisCase && ((AnalysisCase)ac).Properties is PDeltaCaseProps)
                {
                    xml.WriteStartElement("Case");
                    xml.WriteAttributeString("Case", ac.Name);
                    xml.WriteAttributeString("LoadApp", "Full Load");
                    xml.WriteAttributeString("MonitorDOF", "U1");
                    xml.WriteEndElement();
                }
            xml.WriteEndElement();
        }

        private void writeNonLinearParameters(XmlWriter xml, Model model)
        {
            xml.WriteStartElement("Case_-_Static_4_-_NonLinear_Parameters");
            foreach (AbstractCase ac in model.AbstractCases)
                if (ac is AnalysisCase && ((AnalysisCase)ac).Properties is PDeltaCaseProps)
                {
                    NonLinearParams nl = ((PDeltaCaseProps)((AnalysisCase)ac).Properties).NonLinearParams;
                    xml.WriteStartElement("Case");
                    xml.WriteAttributeString("Case", ac.Name);
                    xml.WriteAttributeString("Unloading", nl.Unloading);
                    xml.WriteAttributeString("GeoNonLin", nl.GeoNonLin);
                    xml.WriteAttributeString("ResultsSave", nl.ResultsSave);
                    xml.WriteAttributeString("MaxTotal", nl.MaxTotal.ToString());
                    xml.WriteAttributeString("MaxNull", nl.MaxNull.ToString());
                    xml.WriteAttributeString("MaxIterCS", nl.MaxIterCS.ToString());
                    xml.WriteAttributeString("MaxIterNR", nl.MaxIterNR.ToString());
                    xml.WriteAttributeString("ItConvTol", nl.ItConvTol.ToString());
                    xml.WriteAttributeString("UseEvStep", CodeYN(nl.UseEvStep));
                    xml.WriteAttributeString("EvLumpTol", nl.EvLumpTol.ToString());
                    xml.WriteAttributeString("LSPerIter", nl.LSPerIter.ToString());
                    xml.WriteAttributeString("LSTol", nl.LSTol.ToString());
                    xml.WriteAttributeString("LSStepFact", nl.LSStepFact.ToString());
                    xml.WriteAttributeString("FrameTC", CodeYN(nl.FrameTC));
                    xml.WriteAttributeString("FrameHinge", CodeYN(nl.FrameHinge));
                    xml.WriteAttributeString("CableTC", CodeYN(nl.CableTC));
                    xml.WriteAttributeString("LinkTC", CodeYN(nl.LinkTC));
                    xml.WriteAttributeString("LinkOther", CodeYN(nl.LinkOther));
                    xml.WriteAttributeString("TFMaxIter", nl.TFMaxIter.ToString());
                    xml.WriteAttributeString("TFTol", nl.TFTol.ToString());
                    xml.WriteAttributeString("TFAccelFact", nl.TFAccelFact.ToString());
                    xml.WriteAttributeString("TFNoStop", CodeYN(nl.TFNoStop));
                    xml.WriteEndElement();
                }
            xml.WriteEndElement();
        }

        private void writeModalCase(XmlWriter xml, AnalysisCase aCase)
        {
            AnalysisCaseProps props = aCase.Properties;
            if (props is ModalCaseProps)
            {
                ModalCaseProps mcp = (ModalCaseProps)props;
                if (mcp.ModesType == ModalCaseProps.ModesMethod.RitzVectors)
                {
                    IList<ModalCaseFactor> list = mcp.Loads;
                    foreach (ModalCaseFactor f in list)
                    {
                        if (f == null) continue;
                        AnalysisCaseAppliedLoad load = f.AppliedLoad;
                        if (load is LoadCase)
                        {
                            xml.WriteStartElement("Case");
                            xml.WriteAttributeString("Case", aCase.Name);
                            xml.WriteAttributeString("LoadType", "Load Case");
                            xml.WriteAttributeString("LoadName", ((LoadCase)load).Name);
                            xml.WriteAttributeString("MaxCycles", f.Cycles.ToString());
                            xml.WriteAttributeString("TargetPar", f.Ratio.ToString());
                            xml.WriteEndElement();
                        }
                        if (load is AccelLoad)
                        {
                            xml.WriteStartElement("Case");
                            xml.WriteAttributeString("Case", aCase.Name);
                            xml.WriteAttributeString("LoadType", "Accel");
                            xml.WriteAttributeString("LoadName", "Accel " + ((AccelLoad)load).Value);
                            xml.WriteAttributeString("MaxCycles", f.Cycles.ToString());
                            xml.WriteAttributeString("TargetPar", f.Ratio.ToString());
                            xml.WriteEndElement();
                        }
                    }
                }
            }
        }

        private void writeResponseSpectrumGeneralCase(XmlWriter xml, AnalysisCase aCase)
        {
            AnalysisCaseProps props = aCase.Properties;
            if (props is ResponseSpectrumCaseProps)
            {
                ResponseSpectrumCaseProps rsp = (ResponseSpectrumCaseProps)props;
                xml.WriteStartElement("Case");
                xml.WriteAttributeString("Case", aCase.Name);
                xml.WriteAttributeString("ModalCombo", rsp.ModalCombination.ToString());
                xml.WriteAttributeString("DirCombo", rsp.DirectionalCombination.ToString());
                xml.WriteAttributeString("DampingType", "Constant");
                xml.WriteAttributeString("ConstDamp", rsp.ModalDamping.ToString());
                xml.WriteAttributeString("EccenRatio", "0");
                xml.WriteAttributeString("NumOverride", "0");
                xml.WriteEndElement();
            }
        }

        private void writeResponseSpectrumLoadCase(XmlWriter xml, AnalysisCase aCase)
        {
            AnalysisCaseProps props = aCase.Properties;
            if (props is ResponseSpectrumCaseProps)
            {
                ResponseSpectrumCaseProps rsp = (ResponseSpectrumCaseProps)props;
                IList<ResponseSpectrumCaseFactor> list = rsp.Loads;
                foreach (ResponseSpectrumCaseFactor f in list)
                {
                    if (f == null) continue;
                    AccelLoad load = f.Accel as AccelLoad;
                    if (load != null)
                    {
                        xml.WriteStartElement("Case");
                        xml.WriteAttributeString("Case", aCase.Name);
                        xml.WriteAttributeString("LoadType", "Acceleration");
                        xml.WriteAttributeString("LoadName", encode(load.Value));
                        xml.WriteAttributeString("CoordSys", "GLOBAL");
                        xml.WriteAttributeString("Function", rsp.ResponseSpectrumFunction.ToString());
                        xml.WriteAttributeString("Angle", "0");
                        xml.WriteAttributeString("TransAccSF", rsp.ScaleFactor.ToString());
                        xml.WriteEndElement();
                    }
                }
            }
        }

        private void writeLoadCombinationCase(XmlWriter xml, LoadCombination obj, Canguro.Model.Model m)
        {
            IList<AbstractCaseFactor> list = obj.Cases;

            string steel = CodeYN(m.SteelDesignOptions.DesignCombinations.Contains(obj));
            string concrete = CodeYN(m.ConcreteDesignOptions.DesignCombinations.Contains(obj));
            string alum = CodeYN(m.AluminumDesignOptions.DesignCombinations.Contains(obj));
            string cold = CodeYN(m.ColdFormedDesignOptions.DesignCombinations.Contains(obj));
            string comboType = GetComboType(obj.Type);
            foreach (AbstractCaseFactor f in list)
            {
                AbstractCase aCase = f.Case as AbstractCase;
                if (aCase != null)
                { // && aCase.IsActive)
                    if (aCase is LoadCombination)
                    {
                        xml.WriteStartElement("Combo");
                        xml.WriteAttributeString("ComboName", obj.Name);
                        xml.WriteAttributeString("ComboType", " ");
                        xml.WriteAttributeString("CaseType", "Combo");
                        xml.WriteAttributeString("CaseName", aCase.Name);
                        xml.WriteAttributeString("ScaleFactor", f.Factor.ToString());
                        xml.WriteAttributeString("SteelDesign", steel.ToString());
                        xml.WriteAttributeString("ConcDesign", concrete.ToString());
                        xml.WriteAttributeString("AlumDesign", alum.ToString());
                        xml.WriteAttributeString("ColdDesign", cold.ToString());
                        xml.WriteEndElement();
                    }
                    else if (aCase is AnalysisCase)
                    {
                        AnalysisCaseProps props = ((AnalysisCase)aCase).Properties;
                        if (props is StaticCaseProps)
                        {
                            //StaticCaseProps sprops = (StaticCaseProps)props;
                            xml.WriteStartElement("Combo");
                            xml.WriteAttributeString("ComboName", obj.Name);
                            xml.WriteAttributeString("ComboType", comboType.ToString());
                            xml.WriteAttributeString("CaseType", "Linear Static");
                            xml.WriteAttributeString("CaseName", aCase.Name);
                            xml.WriteAttributeString("ScaleFactor", f.Factor.ToString());
                            xml.WriteAttributeString("SteelDesign", steel.ToString());
                            xml.WriteAttributeString("ConcDesign", concrete.ToString());
                            xml.WriteAttributeString("AlumDesign", alum.ToString());
                            xml.WriteAttributeString("ColdDesign", cold.ToString());
                            xml.WriteEndElement();
                        }
                        else if (props is ResponseSpectrumCaseProps)
                        {
                            xml.WriteStartElement("Combo");
                            xml.WriteAttributeString("ComboName", obj.Name);
                            xml.WriteAttributeString("ComboType", comboType.ToString());
                            xml.WriteAttributeString("CaseType", "Response Spectrum");
                            xml.WriteAttributeString("CaseName", aCase.Name);
                            xml.WriteAttributeString("ScaleFactor", f.Factor.ToString());
                            xml.WriteAttributeString("SteelDesign", steel.ToString());
                            xml.WriteAttributeString("ConcDesign", concrete.ToString());
                            xml.WriteAttributeString("AlumDesign", alum.ToString());
                            xml.WriteAttributeString("ColdDesign", cold.ToString());
                            xml.WriteEndElement();
                        }
                        //steel = concrete = alum = cold = "\"\"";
                    }
                }
            }
        }

        private void writeNamedSets2(XmlWriter xml)
        {
            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Joint Displacements");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Joint Reactions");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Joint Velocities - Relative");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Joint Accelerations - Relative");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Assembled Joint Masses");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Element Joint Forces - Frames");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Base Reactions");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Modal Periods And Frequencies");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Modal Load Participation Ratios");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Modal Participating Mass Ratios");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Modal Participation Factors");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Response Spectrum Modal Information");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 1 - Summary Data - AISC-LRFD99");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 2 - PMM Details - AISC-LRFD99");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 3 - Shear Details - AISC-LRFD99");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 1 - Summary Data - AISC-ASD01");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 2 - PMM Details - AISC-ASD01");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 3 - Shear Details - AISC-ASD01");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 1 - Summary Data - UBC97-ASD");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 2 - PMM Details - UBC97-ASD");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 3 - Shear Details - UBC97-ASD");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Concrete Design 1 - Column Summary Data - Mexican RCDF 2001");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Concrete Design 2 - Beam Summary Data - Mexican RCDF 2001");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Concrete Design 1 - Column Summary Data - UBC97");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Concrete Design 2 - Beam Summary Data - UBC97");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 1 - Summary Data - UBC97-LRFD");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 2 - PMM Details - UBC97-LRFD");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Concrete Design 1 - Column Summary Data - ACI 318-02");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Concrete Design 2 - Beam Summary Data - ACI 318-02");
            xml.WriteEndElement();

            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "Table");
            xml.WriteAttributeString("Selection", "Steel Design 3 - Shear Details - UBC97-LRFD");
            xml.WriteEndElement();
        }

        private void writeNamedSets2(XmlWriter xml, AnalysisCase aCase)
        {
            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "AnalysisCase");
            xml.WriteAttributeString("Selection", aCase.Name);
            xml.WriteEndElement();
        }

        private void writeNamedSets2(XmlWriter xml, LoadCombination aCase)
        {
            if (aCase.Cases.Count > 0)
            {
                xml.WriteStartElement("DBNamedSet");
                xml.WriteAttributeString("DBNamedSet", "RESULTS");
                xml.WriteAttributeString("SelectType", "Combo");
                xml.WriteAttributeString("Selection", aCase.Name);
                xml.WriteEndElement();
            }
        }

        private void writeNamedSets2(XmlWriter xml, LoadCase aCase)
        {
            xml.WriteStartElement("DBNamedSet");
            xml.WriteAttributeString("DBNamedSet", "RESULTS");
            xml.WriteAttributeString("SelectType", "LoadCase");
            xml.WriteAttributeString("Selection", aCase.Name);
            xml.WriteEndElement();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="obj"></param>
        private void writeNode(XmlWriter xml, ManagedDictionary<string, LoadCase> obj)
        {
            xml.WriteStartElement("Load_Case_Definitions");
            foreach (LoadCase lCase in obj.Values)
                if (lCase != null)
                    writeLoadCase(xml, lCase);
            xml.WriteEndElement();
        }

        private void writeLoadCase(XmlWriter xml, LoadCase obj)
        {
            string desType = (obj.CaseType == LoadCase.LoadCaseType.ReduceLive) ? "REDUCIBLE LIVE" : obj.CaseType.ToString().ToUpper();
            if (string.IsNullOrEmpty(obj.AutoLoad))
            {
                xml.WriteStartElement("LoadCase");
                xml.WriteAttributeString("LoadCase", obj.Name);
                xml.WriteAttributeString("DesignType", desType);
                xml.WriteAttributeString("SelfWtMult", obj.SelfWeight.ToString());
                xml.WriteAttributeString("AutoLoad", " ");
                xml.WriteEndElement();
            }
            else
            {
                xml.WriteStartElement("LoadCase");
                xml.WriteAttributeString("LoadCase", obj.Name);
                xml.WriteAttributeString("DesignType", desType);
                xml.WriteAttributeString("SelfWtMult", obj.SelfWeight.ToString());
                xml.WriteAttributeString("AutoLoad", obj.AutoLoad);
                xml.WriteEndElement();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="obj"></param>
        private void writeConcreteNode(XmlWriter xml, DesignOptions obj)
        {
            if (obj is RCDF2001)
            {
                xml.WriteStartElement("Preferences_-_Concrete_Design_-_Mexican_RCDF_2001");
                writeRCDF2001(xml, (RCDF2001)obj);
                xml.WriteEndElement();
            }

            if (obj is ACI318_02)
            {
                xml.WriteStartElement("Preferences_-_Concrete_Design_-_ACI_318-02");
                writeACI318_02(xml, (ACI318_02)obj);
                xml.WriteEndElement();
            }

            if (obj is UBC97_Conc)
            {
                xml.WriteStartElement("Preferences_-_Concrete_Design_-_UBC97");
                writeUBC97_Conc(xml, (UBC97_Conc)obj);
                xml.WriteEndElement();
            }
        }

        private void writeRCDF2001(XmlWriter xml, RCDF2001 obj)
        {
            string thDesign = obj.GetTHDesignName(obj.THDesign);
            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", thDesign);
            xml.WriteAttributeString("NumCurves", obj.NumCurves.ToString());
            xml.WriteAttributeString("NumPoints", obj.NumPoints.ToString());
            xml.WriteAttributeString("MinEccen", CodeYN(obj.MinEccen));
            xml.WriteAttributeString("PatLLF", obj.PatLLF.ToString());
            xml.WriteAttributeString("UFLimit", obj.UFLimit.ToString());
            xml.WriteAttributeString("PhiB", obj.PhiB.ToString());
            xml.WriteAttributeString("PhiT", obj.PhiT.ToString());
            xml.WriteAttributeString("PhiCTied", obj.PhiCTied.ToString());
            xml.WriteAttributeString("PhiCSpiral", obj.PhiCSpiral.ToString());
            xml.WriteAttributeString("PhiV", obj.PhiV.ToString());
            xml.WriteEndElement();
            concreteCode = "Mexican RCDF 2001";
        }

        private void writeACI318_02(XmlWriter xml, ACI318_02 obj)
        {
            string thDesign = obj.GetTHDesignName(obj.THDesign);
            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", "Envelopes");
            xml.WriteAttributeString("NumCurves", "24");
            xml.WriteAttributeString("NumPoints", "11");
            xml.WriteAttributeString("MinEccen", "Yes");
            xml.WriteAttributeString("PatLLF", "0.75");
            xml.WriteAttributeString("UFLimit", "0.95");
            xml.WriteAttributeString("SeisCat", "D");
            xml.WriteAttributeString("PhiT", "0.9");
            xml.WriteAttributeString("PhiCTied", "0.65");
            xml.WriteAttributeString("PhiCSpiral", "0.7");
            xml.WriteAttributeString("PhiV", "0.75");
            xml.WriteAttributeString("PhiVSeismic", "0.6");
            xml.WriteAttributeString("PhiVJoint", "0.85");
            xml.WriteEndElement();

            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", thDesign);
            xml.WriteAttributeString("NumCurves", obj.NumCurves.ToString());
            xml.WriteAttributeString("NumPoints", obj.NumPoints.ToString());
            xml.WriteAttributeString("MinEccen", CodeYN(obj.MinEccen));
            xml.WriteAttributeString("PatLLF", obj.PatLLF.ToString());
            xml.WriteAttributeString("UFLimit", obj.UFLimit.ToString());
            xml.WriteAttributeString("SeisCat", obj.SeisCat.ToString());
            xml.WriteAttributeString("PhiT", obj.PhiT.ToString());
            xml.WriteAttributeString("PhiCTied", obj.PhiCTied.ToString());
            xml.WriteAttributeString("PhiCSpiral", obj.PhiCSpiral.ToString());
            xml.WriteAttributeString("PhiV", obj.PhiV.ToString());
            xml.WriteAttributeString("PhiVSeismic", obj.PhiVSeismic.ToString());
            xml.WriteAttributeString("PhiVJoint", obj.PhiVJoint.ToString());
            xml.WriteEndElement();
            concreteCode = "ACI 318-02";
        }

        private void writeUBC97_Conc(XmlWriter xml, UBC97_Conc obj)
        {
            string thDesign = obj.GetTHDesignName(obj.THDesign);
            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", thDesign);
            xml.WriteAttributeString("NumCurves", obj.NumCurves.ToString());
            xml.WriteAttributeString("NumPoints", obj.NumPoints.ToString());
            xml.WriteAttributeString("MinEccen", CodeYN(obj.MinEccen));
            xml.WriteAttributeString("PatLLF", obj.PatLLF.ToString());
            xml.WriteAttributeString("UFLimit", obj.UFLimit.ToString());
            xml.WriteAttributeString("PhiB", obj.PhiB.ToString());
            xml.WriteAttributeString("PhiCTied", obj.PhiCTied.ToString());
            xml.WriteAttributeString("PhiCSpiral", obj.PhiCSpiral.ToString());
            xml.WriteAttributeString("PhiV", obj.PhiV.ToString());
            xml.WriteEndElement();
            concreteCode = "UBC97";
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="obj"></param>
        private void writeSteelNode(XmlWriter xml, DesignOptions obj)
        {
            if (obj is LRFD99)
            {
                xml.WriteStartElement("Preferences_-_Steel_Design_-_AISC-LRFD99");
                writeLRFD99(xml, (LRFD99)obj);
                xml.WriteEndElement();
            }

            if (obj is UBC97_ASD)
            {
                xml.WriteStartElement("Preferences_-_Steel_Design_-_UBC97-ASD"); 
                writeUBC97_ASD(xml, (UBC97_ASD)obj);
                xml.WriteEndElement();
            }

            if (obj is UBC97_LRFD)
            {
                xml.WriteStartElement("Preferences_-_Steel_Design_-_UBC97-LRFD");
                writeUBC97_LRFD(xml, (UBC97_LRFD)obj);
                xml.WriteEndElement();
            }

            if (obj is ASD01)
            {
                xml.WriteStartElement("Preferences_-_Steel_Design_-_AISC-ASD01");
                writeASD01_Conc(xml, (ASD01)obj);
                xml.WriteEndElement();
            }

            xml.WriteStartElement("Program_Control");
            writeProgramControl(xml);
            xml.WriteEndElement();
        }

        private void writeLRFD99(XmlWriter xml, LRFD99 obj)
        {
            string thDesign = obj.GetTHDesignName(obj.TimeHistoryDesign);
            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", thDesign);
            xml.WriteAttributeString("FrameType", "OMF");
            xml.WriteAttributeString("PatLLF", obj.PatLLF.ToString());
            xml.WriteAttributeString("SRatioLimit", obj.SRatioLimit.ToString());
            xml.WriteAttributeString("MaxIter", obj.MaxIter.ToString());
            xml.WriteAttributeString("PhiB", obj.PhiB.ToString());
            xml.WriteAttributeString("PhiC", obj.PhiC.ToString());
            xml.WriteAttributeString("PhiTY", obj.PhiTY.ToString());
            xml.WriteAttributeString("PhiV", obj.PhiV.ToString());
            xml.WriteAttributeString("PhiTF", obj.PhiTF.ToString());
            xml.WriteAttributeString("PhiVT", obj.PhiVT.ToString());
            xml.WriteAttributeString("PhiCA", obj.PhiCA.ToString());
            xml.WriteAttributeString("CheckDefl", CodeYN(obj.CheckDefl));
            xml.WriteAttributeString("DLRat", obj.DLRat.ToString());
            xml.WriteAttributeString("SDLAndLLRat", obj.SDLAndLLRat.ToString());
            xml.WriteAttributeString("LLRat", obj.LLRat.ToString());
            xml.WriteAttributeString("TotalRat", obj.TotalRat.ToString());
            xml.WriteAttributeString("NetRat", obj.NetRat.ToString());
            xml.WriteAttributeString("SeisCat", obj.SeisCat.ToString());
            xml.WriteAttributeString("SeisCode", CodeYN(obj.SeisCode));
            xml.WriteAttributeString("SeisLoad", CodeYN(obj.SeisLoad));
            xml.WriteAttributeString("PlugWeld", CodeYN(obj.PlugWeld));
            xml.WriteEndElement();
            steelCode = "AISC-LRFD99";
        }

        private void writeUBC97_ASD(XmlWriter xml, UBC97_ASD obj)
        {
            string thDesign = obj.GetTHDesignName(obj.TimeHistoryDesign);
            string FrameType = "Ordinary MRF";
            string zone = obj.GetSeismicZoneName(obj.SeisZone);

            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", thDesign);
            xml.WriteAttributeString("FrameType", FrameType);
            xml.WriteAttributeString("PatLLF", obj.PatLLF.ToString());
            xml.WriteAttributeString("SRatioLimit", obj.SRatioLimit.ToString());
            xml.WriteAttributeString("MaxIter", obj.MaxIter.ToString());
            xml.WriteAttributeString("SeisZone", zone);
            xml.WriteAttributeString("LatFactor", obj.LatFactor.ToString());
            xml.WriteAttributeString("CheckDefl", obj.CheckDefl.ToString());
            xml.WriteAttributeString("DLRat", obj.DLRat.ToString());
            xml.WriteAttributeString("SDLAndLLRat", obj.SDLAndLLRat.ToString());
            xml.WriteAttributeString("LLRat", obj.LLRat.ToString());
            xml.WriteAttributeString("TotalRat", obj.TotalRat.ToString());
            xml.WriteAttributeString("NetRat", obj.NetRat.ToString());
            xml.WriteEndElement();
            steelCode = "UBC97-ASD";
        }

        private void writeUBC97_LRFD(XmlWriter xml, UBC97_LRFD obj)
        {
            string thDesign = obj.GetTHDesignName(obj.TimeHistoryDesign);
            string FrameType = "Ordinary MRF";
            string zone = obj.GetSeismicZoneName(obj.SeisZone);

            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", thDesign);
            xml.WriteAttributeString("FrameType", FrameType);
            xml.WriteAttributeString("PatLLF", obj.PatLLF.ToString());
            xml.WriteAttributeString("SRatioLimit", obj.SRatioLimit.ToString());
            xml.WriteAttributeString("MaxIter", obj.MaxIter.ToString());
            xml.WriteAttributeString("PhiB", obj.PhiB.ToString());
            xml.WriteAttributeString("PhiC", obj.PhiC.ToString());
            xml.WriteAttributeString("PhiT", obj.PhiT.ToString());
            xml.WriteAttributeString("PhiV", obj.PhiV.ToString());
            xml.WriteAttributeString("PhiCA", obj.PhiCA.ToString());
            xml.WriteAttributeString("CheckDefl", CodeYN(obj.CheckDefl));
            xml.WriteAttributeString("DLRat", obj.DLRat.ToString());
            xml.WriteAttributeString("SDLAndLLRat", obj.SDLAndLLRat.ToString());
            xml.WriteAttributeString("LLRat", obj.LLRat.ToString());
            xml.WriteAttributeString("TotalRat", obj.TotalRat.ToString());
            xml.WriteAttributeString("NetRat", obj.NetRat.ToString());
            xml.WriteAttributeString("SeisZone", zone);
            xml.WriteAttributeString("ImpFactor", obj.ImpFactor.ToString());
            xml.WriteEndElement();
            steelCode = "UBC97-LRFD";
        }

        private void writeASD01_Conc(XmlWriter xml, ASD01 obj)
        {
            string thDesign = (obj.TimeHistoryDesign == THDesignOptions.Envelopes) ? "Envelopes" : "Step-by-Step";
            string FrameType = "OMF";

            xml.WriteStartElement("THDesign");
            xml.WriteAttributeString("Name", thDesign);
            xml.WriteAttributeString("FrameType", FrameType);
            xml.WriteAttributeString("PatLLF", obj.PatLLF.ToString());
            xml.WriteAttributeString("SRatioLimit", obj.SRatioLimit.ToString());
            xml.WriteAttributeString("MaxIter", obj.MaxIter.ToString());
            xml.WriteAttributeString("SeisCat", obj.SeisCat.ToString());
            xml.WriteAttributeString("SeisCode", CodeYN(obj.SeisCode));
            xml.WriteAttributeString("SeisLoad", CodeYN(obj.SeisLoad));
            xml.WriteAttributeString("PlugWeld", CodeYN(obj.PlugWeld));
            xml.WriteAttributeString("CheckDefl", CodeYN(obj.CheckDefl));
            xml.WriteAttributeString("DLRat", obj.DLRat.ToString());
            xml.WriteAttributeString("SDLAndLLRat", obj.SDLAndLLRat.ToString());
            xml.WriteAttributeString("LLRat", obj.LLRat.ToString());
            xml.WriteAttributeString("TotalRat", obj.TotalRat.ToString());
            xml.WriteAttributeString("NetRat", obj.NetRat.ToString());
            xml.WriteEndElement();
            steelCode = "AISC-ASD01";
        }

        private void writeProgramControl(XmlWriter xml)
        {
            xml.WriteAttributeString("ProgramName", "SAP2000");
            xml.WriteAttributeString("Version", "10.0.1");
            xml.WriteAttributeString("ProgLevel", "Advanced");
            xml.WriteAttributeString("LicenseOS", "Yes");
            xml.WriteAttributeString("LicenseSC", "Yes");
            xml.WriteAttributeString("LicenseBR", "Yes");
            xml.WriteAttributeString("LicenseHT", "No");
            xml.WriteAttributeString("CurrUnits", "N, m, C");
            xml.WriteAttributeString("SteelCode", steelCode == "" ? "AISC-LRFD99" : steelCode);
            xml.WriteAttributeString("ConcCode", concreteCode == "" ? "ACI 318-02" : concreteCode);
            xml.WriteAttributeString("AlumCode", "AA-ASD 2000");
            xml.WriteAttributeString("ColdCode", "AISI-ASD96");
            xml.WriteAttributeString("RegenHinge", "Yes");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="?"></param>
        private void writeFrameDesignNode(XmlWriter xml, Canguro.Model.Model m)
        {
            xml.WriteStartElement("Frame_Design_Procedures");
            if (m.SteelDesignOptions is NoDesign && m.ConcreteDesignOptions is NoDesign)
            {
                //&& model.AluminumDesignOptions is NoDesign
                //&& model.ColdFormedDesignOptions is NoDesign ) { 
                xml.WriteEndElement();
                return;
            }
            foreach (LineElement e in m.LineList)
            {
                if (e != null)
                {
                    xml.WriteStartElement("Frame");
                    xml.WriteAttributeString("Frame", e.Id.ToString());
                    xml.WriteAttributeString("DesignProc", "From Material");
                    xml.WriteEndElement();
                }
            }
            xml.WriteEndElement();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <param name="spectra"></param>
        /// <param name="aCases"></param>
        private void writeNode(XmlWriter xml, IList<ResponseSpectrum> spectra, IList<AbstractCase> aCases)
        {
            bool[] used = new bool[spectra.Count];

            for (int i = 0; i < used.Length; i++)
                used[i] = false;

            foreach (AbstractCase ac in aCases)
            {
                if (ac is AnalysisCase && ((AnalysisCase)ac).Properties is ResponseSpectrumCaseProps)
                    for (int i = 0; i < used.Length; i++)
                        if (((ResponseSpectrumCaseProps)((AnalysisCase)ac).Properties).ResponseSpectrumFunction.ToString().Equals(spectra[i].ToString()))
                            used[i] = true;
            }

            xml.WriteStartElement("Function_-_Response_Spectrum_-_User");
            for (int i = 0; i < used.Length; i++)
            {
                if (used[i])
                    writeResponseSpectrum(xml, spectra[i]);
            }
            xml.WriteEndElement();
        }

        private void writeResponseSpectrum(XmlWriter xml, ResponseSpectrum spectrum)
        {
            float[,] func = spectrum.Function;

            for (int i = 0; i < func.GetLength(0); i++)
            {
                if (i == 0)
                {
                    xml.WriteStartElement("RS");
                    xml.WriteAttributeString("Name", spectrum.ToString());
                    xml.WriteAttributeString("Period", func[i, 0].ToString());
                    xml.WriteAttributeString("Accel", func[i, 1].ToString());
                    xml.WriteAttributeString("FuncDamp", "0.05");
                    xml.WriteEndElement();

                }
                else
                {
                    xml.WriteStartElement("RS");
                    xml.WriteAttributeString("Name", spectrum.ToString());
                    xml.WriteAttributeString("Period", func[i, 0].ToString());
                    xml.WriteAttributeString("Accel", func[i, 1].ToString());
                    xml.WriteAttributeString("FuncDamp", "0");
                    xml.WriteEndElement();
                }
            }
        }

        private void writeFrameOffsetAssignments(XmlWriter xml, ItemList<LineElement> lines)
        {
            bool hasOffset = false;
            foreach (LineElement frame in lines)
                if (frame != null && !frame.EndOffsets.Equals(LineEndOffsets.Empty))
                {
                    hasOffset = true;
                    break;
                }

            if (hasOffset)
            {
                xml.WriteStartElement("Frame_Offset_Along_Length_Assignments");
                foreach (LineElement frame in lines)
                    if (frame != null)
                    {
                        LineEndOffsets off = frame.EndOffsets;
                        xml.WriteStartElement("Frame");
                        xml.WriteAttributeString("Frame", frame.Id.ToString());
                        xml.WriteAttributeString("Type", "User");
                        xml.WriteAttributeString("LengthI", off.EndI.ToString());
                        xml.WriteAttributeString("LengthJ", off.EndJ.ToString());
                        xml.WriteAttributeString("RigidFactor", off.Factor.ToString());
                        xml.WriteEndElement();
                    }
                xml.WriteEndElement();
            }
        }

        private void writeFrameInsertionPointAssignments(XmlWriter xml, ItemList<LineElement> lines)
        {
            bool hasPoints = false;
            foreach (LineElement frame in lines)
                if (frame != null && frame.CardinalPoint != CardinalPoint.Centroid)
                {
                    hasPoints = true;
                    break;
                }

            if (hasPoints)
            {
                xml.WriteStartElement("Frame_Insertion_Point_Assignments");
                foreach (LineElement frame in lines)
                    if (frame != null)
                    {
                        xml.WriteStartElement("Frame");
                        xml.WriteAttributeString("Frame", frame.Id.ToString());
                        xml.WriteAttributeString("CardinalPt", getCardinalPoint(frame.CardinalPoint));
                        xml.WriteAttributeString("Mirror2", "No");
                        xml.WriteAttributeString("Transform", "Yes");
                        xml.WriteEndElement();
                    }
                xml.WriteEndElement();
            }
        }

        private string getCardinalPoint(CardinalPoint point)
        {
            switch (point)
            {
                case CardinalPoint.BottomLeft: return "1 (bottom left)";
                case CardinalPoint.BottomCenter: return "2 (bottom center)";
                case CardinalPoint.BottomRight: return "3 (bottom right)";
                case CardinalPoint.MiddleLeft: return "4 (middle left)";
                case CardinalPoint.MiddleCenter: return "5 (middle center)";
                case CardinalPoint.MiddleRight: return "6 (middle right)";
                case CardinalPoint.TopLeft: return "7 (top left)";
                case CardinalPoint.TopCenter: return "8 (top center)";
                case CardinalPoint.TopRight: return "9 (top right)";
                case CardinalPoint.Centroid: return "10 (centroid)";
                case CardinalPoint.ShearCenter: return "11 (shear center)";
                default: return "10 (centroid)";
            }
        }

        private void writeLayers(XmlWriter xml, ItemList<Layer> layers)
        {
            xml.WriteStartElement("T-Layers_1_-_Definitions");
            foreach (Layer l in layers)
            {
                if (l != null)
                {
                    xml.WriteStartElement("Layer");
                    xml.WriteAttributeString("Layer", l.Id.ToString());
                    xml.WriteAttributeString("Name", l.Name);
                    xml.WriteEndElement();
                }
            }
            xml.WriteEndElement();
        }

        private void writeLayerAssignments(XmlWriter xml, Model model)
        {
            xml.WriteStartElement("T-Layers_2_-_Assignments");

            foreach (Item item in model.Layers)
                if (item != null && item.Layer != null)
                    writeLayerAssignments(xml, item, "Layer");

            foreach (Item item in model.JointList)
                if (item != null && item.Layer != null)
                    writeLayerAssignments(xml, item, "Joint");

            foreach (Item item in model.LineList)
                if (item != null && item.Layer != null)
                    writeLayerAssignments(xml, item, "Frame");

            xml.WriteEndElement();
        }

        private void writeLayerAssignments(XmlWriter xml, Item item, string type)
        {
            xml.WriteStartElement("Item");
            xml.WriteAttributeString("Item", item.Id.ToString());
            xml.WriteAttributeString("Layer", item.Layer.Id.ToString());
            xml.WriteAttributeString("Visible", CodeYN(item.IsVisible));
            xml.WriteAttributeString("Type", type);
            xml.WriteEndElement();
        }

        private void writeConstraints(XmlWriter xml, Model model)
        {
            xml.WriteStartElement("Constraint_Definitions_-_Diaphragm");
            foreach (Constraint cons in model.ConstraintList)
            {
                if (cons != null)
                {
                    xml.WriteStartElement("Constraint");
                    xml.WriteAttributeString("Name", cons.Name);
                    xml.WriteAttributeString("CoordSys", cons.CoordinateSystem);
                    xml.WriteAttributeString("Axis", cons.Axis.ToString());
                    xml.WriteAttributeString("MultiLevel", "No");
                    xml.WriteEndElement();
                }
            }
            xml.WriteEndElement();

            xml.WriteStartElement("Joint_Constraint_Assignments");
            foreach (Joint j in model.JointList)
            {
                if (j != null && j.Constraint != null)
                {
                    xml.WriteStartElement("Joint");
                    xml.WriteAttributeString("Joint", j.Id.ToString());
                    xml.WriteAttributeString("Constraint", j.Constraint.Name);
                    xml.WriteAttributeString("Type", j.Constraint.ConstraintType.ToString());
                    xml.WriteEndElement();
                }
            }
            xml.WriteEndElement();
        }

        private void writeCanguroVariables(XmlWriter xml)
        {
            xml.WriteStartElement("T-Treu_Options");
            xml.WriteAttributeString("ActiveLayer", model.ActiveLayer.Id.ToString());
            xml.WriteAttributeString("ActiveLoadCase", model.ActiveLoadCase.Name);
            xml.WriteAttributeString("UnitSystem", model.UnitSystem.GetType().ToString());
            xml.WriteAttributeString("Layout", ((byte)Canguro.View.GraphicViewManager.Instance.Layout).ToString());
            writeViewOptions(xml);
            xml.WriteEndElement();
        }

        private void writeViewOptions(XmlWriter xml)
        {
            for (int i = 0; i < 4; i++)
            {
                Canguro.View.GraphicView view = Canguro.View.GraphicViewManager.Instance.GetView(i);
                if (view != null)
                {
                    xml.WriteStartElement("View");
                    xml.WriteAttributeString("ID", view.Id.ToString());
                    xml.WriteAttributeString("OptionsShown", ((int)view.ModelRenderer.RenderOptions.OptionsShown).ToString());
                    xml.WriteAttributeString("Rotation", GetAsString(view.ArcBallCtrl.RotationMatrix));
                    xml.WriteAttributeString("Translation", GetAsString(view.ArcBallCtrl.TranslationMatrix));
                    xml.WriteAttributeString("Scale", GetAsString(view.ArcBallCtrl.Scaling));
                    xml.WriteAttributeString("ScaleFac", view.ArcBallCtrl.ScalingFac.ToString());
                    Microsoft.DirectX.Direct3D.Viewport vp = view.Viewport;
                    xml.WriteAttributeString("Viewport", string.Format("{0},{1},{2},{3},{4},{5}", vp.X, vp.Width, vp.Y, vp.Height, vp.MinZ, vp.MaxZ));
                    xml.WriteEndElement();
                }
            }
        }

        private string GetAsString(Microsoft.DirectX.Matrix m)
        {
            return string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15}",
                m.M11, m.M12, m.M13, m.M14, m.M21, m.M22, m.M23, m.M24, m.M31, m.M32, m.M33, m.M34, m.M41, m.M42, m.M43, m.M44);
        }

        public string encode(AccelLoad.AccelLoadValues value)
        {
            switch (value)
            {
                case AccelLoad.AccelLoadValues.UX: return "Accel U1";
                case AccelLoad.AccelLoadValues.UY: return "Accel U2";
                case AccelLoad.AccelLoadValues.UZ: return "Accel U3";
                case AccelLoad.AccelLoadValues.RX: return "Accel R1";
                case AccelLoad.AccelLoadValues.RY: return "Accel R2";
                case AccelLoad.AccelLoadValues.RZ: return "Accel R3";
            }
            return " ";
        }

        private static string secShape(string shape)
        {
            switch (shape)
            {
                case "2L": return "Double Angle";
                case "C": return "Channel";
                case "I": return "I/Wide Flange";
                case "B": return "Box/Tube";
                case "P": return "Pipe";
                case "L": return "Angle";
                case "T": return "Tee";
                case "RN": return "Circle";
                case "R": return "Rectangular";
                default: return "General";
            }
        }

        private string CodeYN(bool val)
        {
            return (val) ? "Yes" : "No";
        }

        private string GetComboType(LoadCombination.CombinationType comboType)
        {
            switch (comboType)
            {
                case LoadCombination.CombinationType.AbsoluteAdd: return "Abs Add";
                case LoadCombination.CombinationType.Envelope: return "Envelope";
                case LoadCombination.CombinationType.SRSS: return "SRSS";
                default: return "Linear Add";
            }
        }
    }
}
